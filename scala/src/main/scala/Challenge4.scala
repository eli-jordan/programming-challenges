import scala.collection.mutable

object Challenge4 extends App {

   case class Direction(dx: Int, dy: Int) {
      def advanceFrom(x: Int, y: Int): (Int, Int) =
         (x + dx, y + dy)
   }

   val Directions = List(
      Direction(1, 0),
      Direction(1, 1),
      Direction(1, -1),
      Direction(0, 1),
      Direction(0, -1),
      Direction(-1, 0),
      Direction(-1, 1),
      Direction(-1, -1)
   )

   case class DigitGrid(data: Vector[Vector[Int]], size: Int) {
      def apply(x: Int, y: Int): Int = data(y)(x)
   }

   // O(n^3) solution - n = grid size
   def allPrimesIn(grid: DigitGrid): List[BigInt] = {
      val primes = mutable.HashSet[BigInt]()

      for (i <- 0 to grid.size) {
         for (j <- 0 to grid.size) {
            for (dir <- Directions) {
               primes ++= primesCenteredAt(j, i, dir)(grid)
            }
         }
      }

      primes.toList
   }

   def primesCenteredAt(startX: Int, startY: Int, direction: Direction)(grid: DigitGrid): mutable.HashSet[BigInt] = {
      val primes = mutable.HashSet[BigInt]()
      val digits = mutable.Buffer[Int]()
      var x = startX
      var y = startY
      while (x >= 0 && x < grid.size && y >= 0 && y < grid.size) {
         digits.append(grid(x, y))
         val number = BigInt(digits.mkString)
         if (number.isProbablePrime(40)) {
            primes += number
         }

         val (newX, newY) = direction.advanceFrom(x, y)
         x = newX
         y = newY
      }

      primes
   }

   import scala.concurrent.duration._

   def run(input: Vector[Vector[Int]], size: Int): Unit = {
      val start = System.nanoTime()
      val result = allPrimesIn(DigitGrid(input, size))
      val end = System.nanoTime()
      println(s"Found ${result.size} primes in ${(end - start).nanos.toMicros} microseconds / ${(end - start).nanos.toMillis} ms")
   }

   val Input1 = Vector(
      Vector(1, 1, 3),
      Vector(7, 5, 4),
      Vector(9, 3, 7)
   )

   val ChallengeInput1 = Vector(
      Vector(1, 1, 9, 3, 3),
      Vector(9, 9, 5, 6, 3),
      Vector(8, 9, 4, 1, 7),
      Vector(3, 3, 7, 3, 1),
      Vector(3, 2, 9, 3, 9)
   )

   val ChallengeInput2 = Vector(
      Vector(3, 1, 7, 3, 3, 3),
      Vector(9, 9, 5, 6, 3, 9),
      Vector(1, 1, 8, 1, 4, 2),
      Vector(1, 3, 6, 3, 7, 3),
      Vector(3, 4, 9, 1, 9, 9),
      Vector(3, 7, 9, 3, 7, 9)
   )

   val BonusInput = Vector(
      Vector(0, 2, 5, 1, 6, 7, 7, 0, 8, 5, 8, 6, 6, 8, 3, 7, 4, 6, 0, 3, 1, 7, 7, 0, 8, 6, 3, 7, 0, 2, 1, 4, 4, 6, 0, 6, 3, 1, 4, 4),
      Vector(8, 8, 1, 2, 2, 6, 2, 2, 2, 0, 3, 6, 0, 2, 0, 2, 4, 6, 3, 0, 5, 0, 0, 6, 4, 5, 3, 1, 8, 7, 4, 4, 3, 6, 4, 3, 7, 6, 8, 2),
      Vector(5, 2, 5, 1, 8, 5, 5, 3, 6, 7, 2, 7, 8, 5, 0, 8, 8, 4, 8, 6, 4, 2, 3, 4, 5, 0, 4, 3, 7, 7, 5, 8, 7, 1, 4, 3, 4, 0, 7, 8),
      Vector(0, 0, 4, 2, 6, 7, 5, 8, 6, 5, 4, 3, 8, 2, 8, 3, 0, 2, 5, 8, 2, 2, 6, 0, 3, 3, 0, 7, 1, 7, 5, 0, 6, 0, 7, 4, 8, 2, 8, 8),
      Vector(5, 6, 7, 2, 3, 2, 1, 6, 3, 2, 4, 3, 4, 8, 7, 8, 4, 4, 0, 3, 8, 8, 7, 0, 1, 4, 6, 8, 5, 4, 5, 8, 3, 7, 4, 6, 5, 5, 7, 1),
      Vector(3, 4, 4, 8, 3, 2, 6, 7, 2, 8, 1, 4, 3, 6, 0, 6, 8, 8, 1, 8, 5, 2, 1, 8, 7, 6, 1, 6, 5, 2, 4, 8, 7, 8, 0, 4, 4, 0, 6, 0),
      Vector(8, 8, 7, 6, 4, 1, 5, 7, 7, 8, 7, 7, 4, 8, 5, 2, 3, 6, 2, 7, 1, 0, 3, 1, 5, 2, 7, 4, 6, 5, 2, 0, 2, 1, 0, 6, 5, 5, 5, 6),
      Vector(1, 4, 0, 6, 4, 7, 4, 8, 3, 8, 2, 8, 7, 0, 8, 8, 5, 6, 1, 2, 4, 2, 1, 2, 6, 8, 5, 4, 0, 0, 6, 8, 2, 6, 7, 7, 1, 7, 7, 8),
      Vector(7, 8, 2, 7, 4, 4, 3, 3, 3, 1, 1, 8, 4, 3, 3, 0, 3, 7, 1, 5, 2, 1, 0, 4, 3, 4, 7, 2, 2, 1, 8, 8, 0, 3, 5, 5, 0, 3, 8, 3),
      Vector(6, 3, 1, 8, 8, 7, 4, 8, 3, 8, 4, 4, 7, 2, 7, 6, 0, 7, 5, 1, 6, 1, 1, 2, 3, 3, 0, 2, 7, 8, 0, 1, 8, 7, 8, 8, 0, 1, 6, 5),
      Vector(0, 8, 8, 4, 7, 5, 2, 7, 5, 8, 5, 3, 8, 8, 6, 5, 3, 0, 6, 5, 8, 3, 2, 5, 8, 4, 5, 0, 3, 8, 6, 8, 2, 1, 2, 8, 3, 6, 5, 8),
      Vector(1, 2, 6, 0, 3, 6, 2, 1, 2, 4, 6, 1, 5, 1, 7, 6, 7, 3, 5, 3, 0, 3, 5, 6, 3, 7, 1, 7, 7, 7, 3, 6, 5, 7, 4, 6, 7, 3, 3, 3),
      Vector(2, 5, 8, 0, 3, 6, 3, 1, 4, 5, 2, 0, 1, 3, 0, 8, 7, 0, 7, 6, 5, 5, 3, 4, 1, 1, 6, 8, 6, 1, 0, 5, 1, 3, 1, 4, 5, 5, 4, 6),
      Vector(4, 1, 4, 2, 6, 3, 5, 3, 8, 6, 8, 7, 6, 7, 7, 7, 3, 4, 8, 2, 1, 5, 4, 3, 6, 7, 0, 8, 2, 5, 4, 3, 5, 1, 2, 5, 1, 2, 8, 8),
      Vector(5, 3, 0, 1, 3, 3, 0, 4, 6, 3, 2, 1, 7, 2, 6, 0, 6, 2, 6, 0, 4, 7, 1, 3, 2, 6, 2, 5, 5, 2, 7, 1, 6, 1, 7, 7, 5, 4, 0, 4),
      Vector(8, 6, 2, 0, 4, 4, 6, 3, 5, 3, 0, 0, 6, 8, 5, 7, 3, 6, 0, 7, 1, 4, 8, 5, 6, 1, 5, 6, 5, 8, 4, 3, 2, 2, 2, 7, 6, 2, 8, 8),
      Vector(0, 8, 1, 3, 3, 7, 5, 7, 6, 0, 4, 0, 5, 3, 3, 4, 7, 7, 3, 4, 8, 0, 8, 6, 0, 6, 7, 4, 7, 7, 2, 2, 7, 2, 7, 3, 3, 6, 3, 8),
      Vector(6, 7, 1, 5, 5, 5, 8, 0, 0, 7, 1, 0, 8, 5, 0, 1, 0, 5, 3, 6, 1, 2, 0, 0, 8, 3, 2, 4, 5, 0, 1, 2, 5, 5, 7, 1, 0, 4, 2, 5),
      Vector(8, 8, 4, 0, 6, 3, 4, 3, 2, 7, 3, 8, 3, 6, 8, 5, 8, 2, 7, 3, 3, 5, 5, 0, 6, 8, 5, 3, 7, 8, 1, 6, 4, 8, 7, 2, 7, 0, 3, 6),
      Vector(8, 8, 2, 7, 7, 2, 8, 8, 7, 3, 3, 7, 6, 8, 2, 4, 4, 5, 4, 8, 7, 1, 5, 3, 6, 6, 5, 5, 0, 6, 7, 8, 0, 1, 4, 4, 3, 7, 3, 5),
      Vector(0, 6, 6, 4, 6, 4, 0, 5, 6, 3, 8, 3, 6, 4, 8, 7, 4, 8, 1, 1, 7, 4, 8, 1, 6, 5, 8, 6, 5, 7, 2, 6, 2, 8, 8, 1, 5, 1, 7, 3),
      Vector(7, 1, 8, 6, 7, 5, 2, 5, 3, 6, 1, 4, 7, 2, 7, 6, 7, 6, 8, 1, 5, 4, 0, 0, 2, 3, 1, 7, 5, 7, 3, 4, 1, 7, 4, 6, 5, 3, 3, 2),
      Vector(4, 4, 3, 8, 7, 7, 0, 0, 2, 3, 4, 0, 2, 7, 8, 3, 2, 0, 5, 5, 4, 4, 0, 6, 4, 6, 4, 0, 8, 2, 1, 5, 3, 7, 6, 2, 1, 2, 2, 5),
      Vector(4, 1, 6, 2, 4, 4, 2, 4, 0, 1, 5, 5, 8, 7, 7, 1, 4, 7, 4, 1, 4, 0, 2, 0, 3, 8, 6, 5, 1, 6, 2, 0, 8, 0, 2, 3, 7, 7, 2, 1),
      Vector(5, 0, 0, 8, 7, 5, 7, 5, 0, 6, 7, 3, 7, 2, 2, 4, 0, 7, 0, 5, 7, 7, 3, 3, 8, 5, 7, 8, 6, 4, 4, 6, 6, 4, 6, 4, 1, 3, 3, 8),
      Vector(2, 1, 5, 5, 8, 0, 3, 6, 8, 7, 4, 0, 8, 6, 3, 8, 6, 6, 0, 2, 7, 8, 8, 6, 2, 2, 7, 3, 6, 7, 4, 6, 5, 2, 4, 6, 2, 8, 4, 0),
      Vector(2, 1, 1, 8, 1, 4, 8, 0, 1, 7, 7, 4, 4, 1, 1, 3, 2, 0, 3, 7, 2, 0, 1, 1, 4, 7, 5, 6, 2, 7, 6, 8, 2, 1, 0, 6, 7, 1, 5, 8),
      Vector(4, 8, 3, 8, 0, 0, 3, 4, 1, 2, 4, 3, 6, 7, 8, 2, 1, 1, 4, 4, 0, 2, 7, 4, 2, 0, 2, 4, 1, 4, 5, 2, 4, 5, 4, 3, 7, 3, 1, 5),
      Vector(5, 1, 6, 1, 3, 4, 3, 5, 2, 7, 6, 7, 6, 2, 8, 3, 1, 8, 6, 1, 7, 0, 4, 6, 6, 2, 8, 1, 4, 5, 5, 7, 0, 0, 0, 8, 6, 6, 1, 8),
      Vector(7, 7, 2, 3, 8, 8, 6, 2, 6, 1, 2, 8, 7, 1, 7, 5, 7, 0, 5, 1, 5, 2, 2, 7, 3, 0, 8, 6, 3, 1, 7, 5, 8, 8, 3, 1, 7, 1, 8, 8),
      Vector(6, 6, 5, 3, 3, 6, 0, 0, 2, 4, 2, 7, 1, 1, 4, 6, 5, 5, 1, 0, 0, 0, 0, 5, 4, 7, 1, 0, 7, 6, 8, 6, 1, 7, 5, 8, 6, 8, 4, 6),
      Vector(0, 0, 5, 0, 0, 1, 4, 8, 4, 7, 5, 3, 1, 0, 8, 6, 7, 0, 8, 6, 6, 1, 2, 6, 6, 5, 6, 4, 5, 6, 0, 6, 1, 4, 1, 1, 5, 1, 6, 4),
      Vector(3, 3, 5, 1, 1, 5, 6, 2, 0, 8, 1, 6, 1, 7, 0, 8, 7, 8, 4, 4, 4, 1, 3, 8, 7, 8, 2, 7, 0, 7, 2, 7, 3, 4, 3, 4, 6, 2, 5, 1),
      Vector(0, 4, 5, 7, 5, 4, 6, 3, 4, 2, 4, 6, 6, 3, 1, 3, 0, 7, 3, 2, 3, 0, 3, 2, 6, 4, 3, 6, 5, 6, 3, 6, 4, 3, 5, 0, 6, 5, 3, 4),
      Vector(3, 8, 3, 7, 4, 5, 1, 1, 4, 1, 4, 8, 8, 3, 7, 1, 2, 3, 1, 2, 1, 0, 8, 8, 8, 7, 3, 3, 7, 1, 7, 5, 4, 0, 0, 4, 6, 5, 8, 2),
      Vector(3, 3, 3, 4, 2, 4, 8, 2, 6, 5, 8, 3, 5, 2, 3, 4, 1, 5, 8, 6, 3, 8, 3, 4, 3, 0, 5, 8, 4, 4, 4, 6, 4, 0, 8, 8, 6, 4, 6, 5),
      Vector(0, 1, 7, 3, 2, 4, 0, 2, 6, 6, 4, 2, 6, 3, 8, 5, 0, 0, 2, 3, 8, 0, 8, 2, 1, 3, 0, 5, 3, 5, 7, 6, 8, 4, 7, 2, 1, 1, 2, 8),
      Vector(0, 4, 3, 7, 0, 2, 0, 2, 1, 4, 8, 7, 3, 3, 6, 1, 3, 5, 2, 0, 5, 5, 8, 1, 8, 8, 4, 3, 6, 6, 4, 0, 7, 3, 4, 5, 6, 1, 3, 8),
      Vector(3, 8, 5, 8, 6, 0, 4, 5, 8, 6, 0, 6, 8, 2, 4, 5, 5, 2, 0, 2, 8, 7, 5, 4, 1, 0, 0, 0, 0, 1, 4, 3, 3, 4, 7, 6, 0, 0, 5, 8),
      Vector(5, 8, 4, 0, 7, 8, 1, 5, 8, 8, 1, 4, 2, 2, 0, 5, 3, 1, 8, 6, 1, 4, 5, 8, 3, 6, 3, 5, 5, 7, 5, 5, 7, 1, 7, 1, 4, 6, 7, 3)
   )

   (0 to 10).foreach { r =>
      println(s"Run $r")
      run(Input1, 3)
      run(ChallengeInput1, 5)
      run(ChallengeInput2, 6)
      run(BonusInput, 40)
   }
}
